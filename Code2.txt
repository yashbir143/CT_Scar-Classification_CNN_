import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

#%% Model Declaration
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, 5)
        self.pool = nn.MaxPool2d(4, 4)
        
        self.conv2 = nn.Conv2d(16, 24, 5)
        self.pool2 = nn.MaxPool2d(4, 4)
        
        self.conv3 = nn.Conv2d(24, 48, 5)
        self.pool3 = nn.MaxPool2d(4, 4)
        
        self.conv4 = nn.Conv2d(48, 64, 5)
        self.fc1 = nn.Linear(64 * 2 * 2, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 2)
    
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool2(F.relu(self.conv2(x)))
        x = self.pool3(F.relu(self.conv3(x)))
        x = F.relu(self.conv4(x))
        x = x.view(-1, 64 * 2 * 2)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x
#%% Main Method    
def main():
#%% Load Dataset
    transform = transforms.Compose([transforms.ToTensor(), 
                                    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
    trainset = torchvision.datasets.ImageFolder(root='./Dataset/Train', transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)
    
    testset = torchvision.datasets.ImageFolder(root='./Dataset/Test', transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=True, num_workers=2)
    
#%% Create Model
    net = Net()
    print('Model Created')
    
#%% Loss & Optimizer
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
    
    avg_loss = 0.0
    
#%% Main Training Loop
    for epoch in range(10):
        for i, data in enumerate(trainloader, 0):
            inp, lab = data
            optimizer.zero_grad()
            
            out = net(inp)
            
#            print(inp.shape)
#            print(lab.shape)
#            print(out.shape)
            loss = criterion(out, lab)
            loss.backward()
            optimizer.step()
            avg_loss += loss.item()
        print('Epoch {0:2d}, Avg_loss in epoch {1:1.8f}'.format(epoch + 1, avg_loss/(i+1)))
        avg_loss = 0.0
    print('Finished Training')

#%% Test the model
    total = 0
    correct = 0
    with torch.no_grad():
        for data in testloader:
            inp, lab = data
            out = net(inp)
            _, predicted = torch.max(out.data, 1)
            total += lab.size(0)
            correct += (predicted == lab).sum().item()
            
        print('Accuracy on test is {0:2.2f}'.format((100*correct)/total))


#%% Main        
if __name__ == "__main__":
    main()
    
##############################################################